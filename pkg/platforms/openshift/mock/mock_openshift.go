// Code generated by MockGen. DO NOT EDIT.
// Source: openshift.go

// Package mock_openshift is a generated GoMock package.
package mock_openshift

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	openshift "github.com/k8snetworkplumbingwg/sriov-network-operator/pkg/platforms/openshift"
	v1 "github.com/openshift/machine-config-operator/pkg/apis/machineconfiguration.openshift.io/v1"
	v10 "k8s.io/api/core/v1"
)

// MockOpenshiftContextInterface is a mock of OpenshiftContextInterface interface.
type MockOpenshiftContextInterface struct {
	ctrl     *gomock.Controller
	recorder *MockOpenshiftContextInterfaceMockRecorder
}

// MockOpenshiftContextInterfaceMockRecorder is the mock recorder for MockOpenshiftContextInterface.
type MockOpenshiftContextInterfaceMockRecorder struct {
	mock *MockOpenshiftContextInterface
}

// NewMockOpenshiftContextInterface creates a new mock instance.
func NewMockOpenshiftContextInterface(ctrl *gomock.Controller) *MockOpenshiftContextInterface {
	mock := &MockOpenshiftContextInterface{ctrl: ctrl}
	mock.recorder = &MockOpenshiftContextInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOpenshiftContextInterface) EXPECT() *MockOpenshiftContextInterfaceMockRecorder {
	return m.recorder
}

// ChangeMachineConfigPoolPause mocks base method.
func (m *MockOpenshiftContextInterface) ChangeMachineConfigPoolPause(arg0 context.Context, arg1 *v1.MachineConfigPool, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeMachineConfigPoolPause", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeMachineConfigPoolPause indicates an expected call of ChangeMachineConfigPoolPause.
func (mr *MockOpenshiftContextInterfaceMockRecorder) ChangeMachineConfigPoolPause(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeMachineConfigPoolPause", reflect.TypeOf((*MockOpenshiftContextInterface)(nil).ChangeMachineConfigPoolPause), arg0, arg1, arg2)
}

// GetFlavor mocks base method.
func (m *MockOpenshiftContextInterface) GetFlavor() openshift.OpenshiftFlavor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlavor")
	ret0, _ := ret[0].(openshift.OpenshiftFlavor)
	return ret0
}

// GetFlavor indicates an expected call of GetFlavor.
func (mr *MockOpenshiftContextInterfaceMockRecorder) GetFlavor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlavor", reflect.TypeOf((*MockOpenshiftContextInterface)(nil).GetFlavor))
}

// GetNodeMachinePoolName mocks base method.
func (m *MockOpenshiftContextInterface) GetNodeMachinePoolName(arg0 context.Context, arg1 *v10.Node) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeMachinePoolName", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeMachinePoolName indicates an expected call of GetNodeMachinePoolName.
func (mr *MockOpenshiftContextInterfaceMockRecorder) GetNodeMachinePoolName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeMachinePoolName", reflect.TypeOf((*MockOpenshiftContextInterface)(nil).GetNodeMachinePoolName), arg0, arg1)
}

// IsHypershift mocks base method.
func (m *MockOpenshiftContextInterface) IsHypershift() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsHypershift")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsHypershift indicates an expected call of IsHypershift.
func (mr *MockOpenshiftContextInterfaceMockRecorder) IsHypershift() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsHypershift", reflect.TypeOf((*MockOpenshiftContextInterface)(nil).IsHypershift))
}

// IsOpenshiftCluster mocks base method.
func (m *MockOpenshiftContextInterface) IsOpenshiftCluster() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsOpenshiftCluster")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsOpenshiftCluster indicates an expected call of IsOpenshiftCluster.
func (mr *MockOpenshiftContextInterfaceMockRecorder) IsOpenshiftCluster() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOpenshiftCluster", reflect.TypeOf((*MockOpenshiftContextInterface)(nil).IsOpenshiftCluster))
}

// OpenshiftAfterCompleteDrainNode mocks base method.
func (m *MockOpenshiftContextInterface) OpenshiftAfterCompleteDrainNode(arg0 context.Context, arg1 *v10.Node) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenshiftAfterCompleteDrainNode", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenshiftAfterCompleteDrainNode indicates an expected call of OpenshiftAfterCompleteDrainNode.
func (mr *MockOpenshiftContextInterfaceMockRecorder) OpenshiftAfterCompleteDrainNode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenshiftAfterCompleteDrainNode", reflect.TypeOf((*MockOpenshiftContextInterface)(nil).OpenshiftAfterCompleteDrainNode), arg0, arg1)
}

// OpenshiftBeforeDrainNode mocks base method.
func (m *MockOpenshiftContextInterface) OpenshiftBeforeDrainNode(arg0 context.Context, arg1 *v10.Node) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenshiftBeforeDrainNode", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenshiftBeforeDrainNode indicates an expected call of OpenshiftBeforeDrainNode.
func (mr *MockOpenshiftContextInterfaceMockRecorder) OpenshiftBeforeDrainNode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenshiftBeforeDrainNode", reflect.TypeOf((*MockOpenshiftContextInterface)(nil).OpenshiftBeforeDrainNode), arg0, arg1)
}
