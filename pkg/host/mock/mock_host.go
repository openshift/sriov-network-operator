// Code generated by MockGen. DO NOT EDIT.
// Source: host.go

// Package mock_host is a generated GoMock package.
package mock_host

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockHostManagerInterface is a mock of HostManagerInterface interface.
type MockHostManagerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockHostManagerInterfaceMockRecorder
}

// MockHostManagerInterfaceMockRecorder is the mock recorder for MockHostManagerInterface.
type MockHostManagerInterfaceMockRecorder struct {
	mock *MockHostManagerInterface
}

// NewMockHostManagerInterface creates a new mock instance.
func NewMockHostManagerInterface(ctrl *gomock.Controller) *MockHostManagerInterface {
	mock := &MockHostManagerInterface{ctrl: ctrl}
	mock.recorder = &MockHostManagerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHostManagerInterface) EXPECT() *MockHostManagerInterfaceMockRecorder {
	return m.recorder
}

// LoadKernelModule mocks base method.
func (m *MockHostManagerInterface) LoadKernelModule(name string, args ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{name}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LoadKernelModule", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadKernelModule indicates an expected call of LoadKernelModule.
func (mr *MockHostManagerInterfaceMockRecorder) LoadKernelModule(name interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadKernelModule", reflect.TypeOf((*MockHostManagerInterface)(nil).LoadKernelModule), varargs...)
}

// TryEnableRdma mocks base method.
func (m *MockHostManagerInterface) TryEnableRdma() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TryEnableRdma")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TryEnableRdma indicates an expected call of TryEnableRdma.
func (mr *MockHostManagerInterfaceMockRecorder) TryEnableRdma() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryEnableRdma", reflect.TypeOf((*MockHostManagerInterface)(nil).TryEnableRdma))
}

// TryEnableTun mocks base method.
func (m *MockHostManagerInterface) TryEnableTun() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TryEnableTun")
}

// TryEnableTun indicates an expected call of TryEnableTun.
func (mr *MockHostManagerInterfaceMockRecorder) TryEnableTun() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryEnableTun", reflect.TypeOf((*MockHostManagerInterface)(nil).TryEnableTun))
}

// TryEnableVhostNet mocks base method.
func (m *MockHostManagerInterface) TryEnableVhostNet() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TryEnableVhostNet")
}

// TryEnableVhostNet indicates an expected call of TryEnableVhostNet.
func (mr *MockHostManagerInterfaceMockRecorder) TryEnableVhostNet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryEnableVhostNet", reflect.TypeOf((*MockHostManagerInterface)(nil).TryEnableVhostNet))
}

// enableRDMA mocks base method.
func (m *MockHostManagerInterface) enableRDMA(arg0, arg1, arg2 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "enableRDMA", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// enableRDMA indicates an expected call of enableRDMA.
func (mr *MockHostManagerInterfaceMockRecorder) enableRDMA(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "enableRDMA", reflect.TypeOf((*MockHostManagerInterface)(nil).enableRDMA), arg0, arg1, arg2)
}

// enableRDMAOnRHELMachine mocks base method.
func (m *MockHostManagerInterface) enableRDMAOnRHELMachine() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "enableRDMAOnRHELMachine")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// enableRDMAOnRHELMachine indicates an expected call of enableRDMAOnRHELMachine.
func (mr *MockHostManagerInterfaceMockRecorder) enableRDMAOnRHELMachine() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "enableRDMAOnRHELMachine", reflect.TypeOf((*MockHostManagerInterface)(nil).enableRDMAOnRHELMachine))
}

// getOSPrettyName mocks base method.
func (m *MockHostManagerInterface) getOSPrettyName() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getOSPrettyName")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getOSPrettyName indicates an expected call of getOSPrettyName.
func (mr *MockHostManagerInterfaceMockRecorder) getOSPrettyName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getOSPrettyName", reflect.TypeOf((*MockHostManagerInterface)(nil).getOSPrettyName))
}

// installRDMA mocks base method.
func (m *MockHostManagerInterface) installRDMA(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "installRDMA", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// installRDMA indicates an expected call of installRDMA.
func (mr *MockHostManagerInterfaceMockRecorder) installRDMA(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "installRDMA", reflect.TypeOf((*MockHostManagerInterface)(nil).installRDMA), arg0)
}

// isCoreOS mocks base method.
func (m *MockHostManagerInterface) isCoreOS() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "isCoreOS")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// isCoreOS indicates an expected call of isCoreOS.
func (mr *MockHostManagerInterfaceMockRecorder) isCoreOS() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isCoreOS", reflect.TypeOf((*MockHostManagerInterface)(nil).isCoreOS))
}

// isKernelModuleLoaded mocks base method.
func (m *MockHostManagerInterface) isKernelModuleLoaded(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "isKernelModuleLoaded", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// isKernelModuleLoaded indicates an expected call of isKernelModuleLoaded.
func (mr *MockHostManagerInterfaceMockRecorder) isKernelModuleLoaded(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isKernelModuleLoaded", reflect.TypeOf((*MockHostManagerInterface)(nil).isKernelModuleLoaded), arg0)
}

// isRHELSystem mocks base method.
func (m *MockHostManagerInterface) isRHELSystem() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "isRHELSystem")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// isRHELSystem indicates an expected call of isRHELSystem.
func (mr *MockHostManagerInterfaceMockRecorder) isRHELSystem() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isRHELSystem", reflect.TypeOf((*MockHostManagerInterface)(nil).isRHELSystem))
}

// isUbuntuSystem mocks base method.
func (m *MockHostManagerInterface) isUbuntuSystem() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "isUbuntuSystem")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// isUbuntuSystem indicates an expected call of isUbuntuSystem.
func (mr *MockHostManagerInterfaceMockRecorder) isUbuntuSystem() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isUbuntuSystem", reflect.TypeOf((*MockHostManagerInterface)(nil).isUbuntuSystem))
}

// rdmaIsLoaded mocks base method.
func (m *MockHostManagerInterface) rdmaIsLoaded() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "rdmaIsLoaded")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// rdmaIsLoaded indicates an expected call of rdmaIsLoaded.
func (mr *MockHostManagerInterfaceMockRecorder) rdmaIsLoaded() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "rdmaIsLoaded", reflect.TypeOf((*MockHostManagerInterface)(nil).rdmaIsLoaded))
}

// reloadDriver mocks base method.
func (m *MockHostManagerInterface) reloadDriver(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "reloadDriver", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// reloadDriver indicates an expected call of reloadDriver.
func (mr *MockHostManagerInterfaceMockRecorder) reloadDriver(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "reloadDriver", reflect.TypeOf((*MockHostManagerInterface)(nil).reloadDriver), arg0)
}

// triggerUdevEvent mocks base method.
func (m *MockHostManagerInterface) triggerUdevEvent() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "triggerUdevEvent")
	ret0, _ := ret[0].(error)
	return ret0
}

// triggerUdevEvent indicates an expected call of triggerUdevEvent.
func (mr *MockHostManagerInterfaceMockRecorder) triggerUdevEvent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "triggerUdevEvent", reflect.TypeOf((*MockHostManagerInterface)(nil).triggerUdevEvent))
}
