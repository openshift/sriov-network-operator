// Code generated by MockGen. DO NOT EDIT.
// Source: command.go

// Package mock_utils is a generated GoMock package.
package mock_utils

import (
	bytes "bytes"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCommandInterface is a mock of CommandInterface interface.
type MockCommandInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCommandInterfaceMockRecorder
}

// MockCommandInterfaceMockRecorder is the mock recorder for MockCommandInterface.
type MockCommandInterfaceMockRecorder struct {
	mock *MockCommandInterface
}

// NewMockCommandInterface creates a new mock instance.
func NewMockCommandInterface(ctrl *gomock.Controller) *MockCommandInterface {
	mock := &MockCommandInterface{ctrl: ctrl}
	mock.recorder = &MockCommandInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommandInterface) EXPECT() *MockCommandInterfaceMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockCommandInterface) Run(arg0 string, arg1 ...string) (bytes.Buffer, bytes.Buffer, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Run", varargs...)
	ret0, _ := ret[0].(bytes.Buffer)
	ret1, _ := ret[1].(bytes.Buffer)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Run indicates an expected call of Run.
func (mr *MockCommandInterfaceMockRecorder) Run(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockCommandInterface)(nil).Run), varargs...)
}
