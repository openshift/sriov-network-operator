mode: 0755
overwrite: true
path: "/usr/local/bin/switchdev-configuration-after-nm.sh"
contents:
  inline: |
    #!/bin/bash
    set -eux
    input="/etc/sriov-operator/sriov_config.json"

    minId=-1                                                                                             
    maxId=-1
                                                    
    extract_min_max_ids() {                                                                              
      range=$(jq -c '.vfRange' -r <<< $group)
      ids=(${range//-/ })                                                                                
      length=${#ids[@]}                                                                                  
      minId=-1              
      maxId=-1               
      if [[ length -eq 2 ]]; then
        minId=${ids[0]}
        maxId=${ids[1]}
      elif [[ length -eq 1 ]]; then
        minId=${ids[0]}
        maxId=$minId   
      fi
    }

    if [ ! -f $input ]; then
      echo "File /etc/sriov-operator/sriov_config.json not exist."
      exit
    fi

    # Required for NetworkManager configuration(e.g. bond) to settle down
    sleep 3

    jq -c '.interfaces[]' $input | while read iface;
    do
      eswitch_mode=$(echo $iface | jq '.eSwitchMode' -r)
      if [[ "$eswitch_mode" == "switchdev" ]]; then
        pci_addr=$(echo $iface | jq '.pciAddress' -r)
        name=$(echo $iface | jq '.name' -r)

        echo "load VF driver for $pci_addr"
        VfDirs=$(ls /sys/bus/pci/devices/${pci_addr} | grep virtfn)

        # load VF driver and configure vdpa if needed
        for VfDir in $VfDirs
        do
          VfPciAddr=$(basename "$( readlink -f /sys/bus/pci/devices/${pci_addr}/$VfDir )")
          echo $VfPciAddr > /sys/bus/pci/drivers_probe

          # extract VF id from a path like '/sys/bus/pci/devices/0000:65:00.0/virtfn1'
          # the VF id is the 7th character after 'virtfn'
          vfid=${VfDir:6}
          
          # check if vfid in VF group range
          jq -c '.vfGroups[]' <<< "$iface" | while read group;
          do
            extract_min_max_ids
            vdpaType=$(jq -c '.vdpaType' -r <<< $group)
            if [ $vfid -le $maxId ] && [ $vfid -ge $minId ] && ([ $vdpaType == "virtio" ] || [ $vdpaType == "vhost" ]); then
              vdpa_name=vdpa:${VfPciAddr}
              vdpa_cmd="vdpa dev add name "${vdpa_name}" mgmtdev pci/"${VfPciAddr}" max_vqp 32"
              eval $vdpa_cmd
              # set the driver_override. When the specified driver will be loaded in the kernel
              # it will be automatically bound to the vdpa device
              driver_override=virtio_vdpa
              if [ $vdpaType == "vhost" ]; then
                driver_override=vhost_vdpa
              fi
              echo $driver_override > /sys/bus/vdpa/devices/$vdpa_name/driver_override
            fi
          done
        done
      fi
    done
