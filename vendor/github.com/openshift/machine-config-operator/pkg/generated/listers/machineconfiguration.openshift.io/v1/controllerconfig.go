// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/openshift/machine-config-operator/pkg/apis/machineconfiguration.openshift.io/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ControllerConfigLister helps list ControllerConfigs.
// All objects returned here must be treated as read-only.
type ControllerConfigLister interface {
	// List lists all ControllerConfigs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ControllerConfig, err error)
	// Get retrieves the ControllerConfig from the index for a given name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.ControllerConfig, error)
	ControllerConfigListerExpansion
}

// controllerConfigLister implements the ControllerConfigLister interface.
type controllerConfigLister struct {
	indexer cache.Indexer
}

// NewControllerConfigLister returns a new ControllerConfigLister.
func NewControllerConfigLister(indexer cache.Indexer) ControllerConfigLister {
	return &controllerConfigLister{indexer: indexer}
}

// List lists all ControllerConfigs in the indexer.
func (s *controllerConfigLister) List(selector labels.Selector) (ret []*v1.ControllerConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ControllerConfig))
	})
	return ret, err
}

// Get retrieves the ControllerConfig from the index for a given name.
func (s *controllerConfigLister) Get(name string) (*v1.ControllerConfig, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("controllerconfig"), name)
	}
	return obj.(*v1.ControllerConfig), nil
}
