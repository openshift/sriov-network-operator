// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/openshift/api/operator/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CloudCredentialLister helps list CloudCredentials.
// All objects returned here must be treated as read-only.
type CloudCredentialLister interface {
	// List lists all CloudCredentials in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.CloudCredential, err error)
	// Get retrieves the CloudCredential from the index for a given name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.CloudCredential, error)
	CloudCredentialListerExpansion
}

// cloudCredentialLister implements the CloudCredentialLister interface.
type cloudCredentialLister struct {
	indexer cache.Indexer
}

// NewCloudCredentialLister returns a new CloudCredentialLister.
func NewCloudCredentialLister(indexer cache.Indexer) CloudCredentialLister {
	return &cloudCredentialLister{indexer: indexer}
}

// List lists all CloudCredentials in the indexer.
func (s *cloudCredentialLister) List(selector labels.Selector) (ret []*v1.CloudCredential, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.CloudCredential))
	})
	return ret, err
}

// Get retrieves the CloudCredential from the index for a given name.
func (s *cloudCredentialLister) Get(name string) (*v1.CloudCredential, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("cloudcredential"), name)
	}
	return obj.(*v1.CloudCredential), nil
}
